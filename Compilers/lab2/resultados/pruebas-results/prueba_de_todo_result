(setq a 0)(setq b 3)(setq c 0)
(setq d 3)
(setq mivector (make-array 20))
(setq nuevo_vec (make-array 3))
(defun suma (suma_x suma_y)
    (print "Valor: ")
    (princ suma_x) 
    (return-from suma (+ suma_x suma_y))
)

(defun cuadrado (cuadrado_n)
    (setq cuadrado_res (* cuadrado_n cuadrado_n))
    (return-from cuadrado cuadrado_res)
)

(defun func1 ()
    (print "Hola Mundo")
    (setf (aref nuevo_vec 2) 123)
    (princ a) (princ b) (princ c) 
    (princ "Hola") (princ a) (princ b) 
    (princ (aref mivector 4)) 
    (return-from func1 var)
)

(defun func2 ()
    (setq func2_a 4)
    (setf func2_a (+ func2_a 1))
    (setf func2_a 0)
    (loop while (< func2_a n) do
        (setf func2_a (+ func2_a 1))
        (setf func2_a (+ func2_a 2))
    )
    (princ (+ func2_a 1)) (princ b) (princ w) (princ "ADIOS") 
    (return-from func2 (* v v))
)

(defun mifuncion ()
    (print "Una prueba")
)

(defun cuadrado (cuadrado_n)
    (princ cuadrado_n) (princ " ") (princ (* cuadrado_n cuadrado_n)) 
    (print "")
)

(defun mimax (mimax_a mimax_b)
    (if (>= mimax_a mimax_b)
        (progn (princ mimax_a) 
            (print " ")
        )
        (progn (princ mimax_b) 
            (print " ")
    ))
)

(defun factoriala (factoriala_n factoriala_f factoriala_fm)
    (if (= factoriala_n 1)
        (progn (princ factoriala_f) (princ " ") 
            (return-from factoriala factoriala_n)
        )
        (progn (factoriala (- factoriala_n 1) (* factoriala_f factoriala_fm) (- factoriala_fm 1))
    ))
)

(defun is_even (is_even_v)
    (setq is_even_ep 0)
    (princ is_even_v) 
    (if (= (mod is_even_v 2) 0)
        (progn (print " is even")
            (setf is_even_ep 1)
        )
        (progn (print " is odd")
            (setf is_even_ep 0)
    ))
    (return-from is_even is_even_ep)
)

(defun fibonacci (fibonacci_a fibonacci_b fibonacci_n)
    (setq fibonacci_retorno 0)
    (if (< fibonacci_n 2)
        (progn (return-from fibonacci fibonacci_b)
        )
        (progn (princ (fibonacci  fibonacci_b (+ fibonacci_a fibonacci_b) (- fibonacci_n 1))) 
            (return-from fibonacci (fibonacci  fibonacci_b (+ fibonacci_a fibonacci_b) (- fibonacci_n 1)))
    ))
    (princ c) (princ " ") (princ (mifuncion )) 
    (loop while (<= i m) do
        (setf (aref potencias i) (* (aref potencias (- i 1)) 2))
        (setf i (+ i 1))
    )
    (return-from fibonacci (fibonacci  fibonacci_b (+ fibonacci_a fibonacci_b) (- fibonacci_n 1)))
)

(defun listaprimos (listaprimos_n listaprimos_m)
    (loop while (< listaprimos_n listaprimos_m) do
        (if (/= (esprimo  listaprimos_n) 0)
            (progn (princ listaprimos_n) (princ " ") 
        ))
        (setf listaprimos_n (+ listaprimos_n 1))
        (return-from listaprimos a)
    )
)

(defun factorial (factorial_n)
    (setq factorial_retorno 0)
    (if (= factorial_n 1)
        (progn (setf factorial_retorno 1)
        )
        (progn (setf factorial_retorno (* factorial_n (factorial  (- factorial_n 1))))
    ))
    (princ factorial_n) (princ " ") (princ factorial_retorno) 
    (print " ")
    (return-from factorial (mifuncion  a (- 3 b) 5))
)

(defun main()
    (setq main_variable 0)
    (if (= a 0)
        (progn (setf b 123)
        )
        (progn (setf b 234)
    ))
    (setf a (+ 6 5))
    (print "Hello world")
    (princ a) 
    (loop while (/= a 10) do
        (setf a (+ a 1))
        (setf c (/ b 34))
    )
    (is_even 8)
    (mifuncion a (- 3 b) 5)
    (setf main i)
    (loop while 0 do
        (<= i 23)
        (setf (setf exis (+ exis 2))
            (return-from main 3)
             i)
    )
    (if (= (mod a 2) 0)
        (progn (setf a 45)
        )
        (progn (return-from main (funcion2 ))
    ))
)

