(defun funcion (funcion_a)
    (setq funcion_x 5)(setq funcion_y 2)(setq funcion_z 0)
    (setq funcion_v (make-array 10))
    (setf (aref funcion_v 0) (+ funcion_x funcion_y))
    (setf funcion_z (* (aref funcion_v 0) 2))
    (print "Valores iniciales:")
    (princ funcion_x) 
    (princ funcion_y) 
    (princ funcion_z) 
    (if (> funcion_z 10)
        (progn (print "Z es mayor que 10")
        )
        (progn (print "Z es menor o igual a 10")
    ))
    (setf funcion_x 0)
    (loop while (< funcion_x 5) do
        (setf (aref funcion_v funcion_x) (* funcion_x 2))
        (princ (aref funcion_v funcion_x)) 
        (setf funcion_x (+ funcion_x 1))
    )
    (loop while (< funcion_y 10) do
        (setf funcion_z (+ funcion_z 1))
    )
    (return-from funcion funcion_z)
)

